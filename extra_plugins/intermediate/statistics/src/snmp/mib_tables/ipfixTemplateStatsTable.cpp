/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.table_data.conf
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include <iostream>
#include "ipfixTemplateStatsTable.h"

struct cache_data{
    netsnmp_tdata               *table;
    TemplateStatsTable_t        *storage;
};

/** Initialize the ipfixTemplateStatsTable table by defining its contents and how it's structured */
void
initialize_table_ipfixTemplateStatsTable(TemplateStatsTable_t *storage, uint data_timeout)
{
    const oid ipfixTemplateStatsTable_oid[] = {1,3,6,1,2,1,193,1,2,2};
    const size_t ipfixTemplateStatsTable_oid_len   = OID_LENGTH(ipfixTemplateStatsTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_tdata                   *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache                   *cache;
    struct cache_data               *data;

    DEBUGMSGTL(("ipfixTemplateStatsTable:init", "initializing table ipfixTemplateStatsTable\n"));

    reg = netsnmp_create_handler_registration(
              "ipfixTemplateStatsTable",     ipfixTemplateStatsTable_handler,
              ipfixTemplateStatsTable_oid, ipfixTemplateStatsTable_oid_len,
              HANDLER_CAN_RONLY
              );

    table_data = netsnmp_tdata_create_table( "ipfixTemplateStatsTable", 0 );
    if (NULL == table_data) {
        snmp_log(LOG_ERR,"error creating tdata table for ipfixTemplateStatsTable\n");
        return;
    }
    cache = netsnmp_cache_create(data_timeout,
                                  ipfixTemplateStatsTable_load, ipfixTemplateStatsTable_free,
                                  ipfixTemplateStatsTable_oid, ipfixTemplateStatsTable_oid_len);

    // Creating data for cache to read while reloading MIB
    data = static_cast<cache_data *>(malloc(sizeof(struct cache_data )));
    data->table = table_data;
    data->storage = storage;

    if (NULL == cache) {
        snmp_log(LOG_ERR,"error creating cache for ipfixTemplateStatsTable\n");
    }
    else{
        cache->flags = NETSNMP_CACHE_DONT_FREE_EXPIRED | NETSNMP_CACHE_AUTO_RELOAD;
        cache->magic = (void *)data;
    }
    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    if (NULL == table_info) {
        snmp_log(LOG_ERR,"error creating table info for ipfixTemplateStatsTable\n");
        return;
    }
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_UNSIGNED,  /* index: ipfixTransportSessionIndex */
                           ASN_UNSIGNED,  /* index: ipfixTemplateObservationDomainId */
                           ASN_UNSIGNED,  /* index: ipfixTemplateId */
                           0);

    table_info->min_column = COLUMN_IPFIXTEMPLATE_DATARECORDS;
    table_info->max_column = COLUMN_IPFIXTEMPLATE_DISCONTINUITYTIME;
    
    netsnmp_tdata_register( reg, table_data, table_info );
    if (cache) 
        netsnmp_inject_handler_before( reg, netsnmp_cache_handler_get(cache),
                                       TABLE_TDATA_NAME);

    /* Initialise the contents of the table here */
}

/* create a new row in the table */
netsnmp_tdata_row *
ipfixTemplateStatsTable_createEntry(netsnmp_tdata *table_data
                 , uint32_t  ipfixTransportSessionIndex
                 , uint32_t  ipfixTemplateObservationDomainId
                 , uint32_t  ipfixTemplateId
                ) {
    TemplateStatsEntry_t *entry;
    netsnmp_tdata_row *row;

    entry = SNMP_MALLOC_TYPEDEF(TemplateStatsEntry_t);
    if (!entry)
        return NULL;

    row = netsnmp_tdata_create_row();
    if (!row) {
        SNMP_FREE(entry);
        return NULL;
    }
    row->data = entry;

    DEBUGMSGT(("ipfixTemplateStatsTable:entry:create", "row 0x%lu\n", (uintptr_t)row));
    entry->TransportSessionIndex = ipfixTransportSessionIndex;
    netsnmp_tdata_row_add_index( row, ASN_UNSIGNED,
                                 &(entry->TransportSessionIndex),
                                 sizeof(entry->TransportSessionIndex));
    entry->ObservationDomainId = ipfixTemplateObservationDomainId;
    netsnmp_tdata_row_add_index( row, ASN_UNSIGNED,
                                 &(entry->ObservationDomainId),
                                 sizeof(entry->ObservationDomainId));
    entry->TemplateId = ipfixTemplateId;
    netsnmp_tdata_row_add_index( row, ASN_UNSIGNED,
                                 &(entry->TemplateId),
                                 sizeof(entry->TemplateId));
    if (table_data)
        netsnmp_tdata_add_row( table_data, row );
    return row;
}

/* remove a row from the table */
void
ipfixTemplateStatsTable_removeEntry(netsnmp_tdata     *table_data, 
                 netsnmp_tdata_row *row) {
    TemplateStatsEntry_t *entry;

    if (!row)
        return;    /* Nothing to remove */

    DEBUGMSGT(("ipfixTemplateStatsTable:entry:remove", "row 0x%lu\n", (uintptr_t)row));

    entry = (TemplateStatsEntry_t *)row->data;
    SNMP_FREE( entry );

    if (table_data)
        netsnmp_tdata_remove_and_delete_row( table_data, row );
    else
        netsnmp_tdata_delete_row( row );    
}

/* Example cache handling - set up table_data list from a suitable file */
int
ipfixTemplateStatsTable_load( netsnmp_cache *cache, void *vmagic ) {
    (void) cache;
    netsnmp_tdata           *table;
    netsnmp_tdata_row       *row;
    TemplateStatsEntry_t    *mib_row;
    struct cache_data       *data;

    data = static_cast<cache_data *>(vmagic);
    table = data->table;

    while(storage_lock.test_and_set(std::memory_order_acquire));
    for ( auto it : *data->storage) {

        row = ipfixTemplateStatsTable_createEntry(table
                , std::get<0>(it.first)
                , std::get<1>(it.first)
                , std::get<2>(it.first)
                        );
        if (row == NULL)
            continue;
        mib_row = (TemplateStatsEntry_t *)row->data;
        memcpy(mib_row, &it.second, sizeof(TemplateEntry_t));
        mib_row->valid = 1;
    }
    storage_lock.clear(std::memory_order_release);
    return 0;  /* OK */
}

void
ipfixTemplateStatsTable_free( netsnmp_cache *cache, void *vmagic ) {
    (void) cache;
    struct cache_data *data = (struct cache_data*) vmagic;
    netsnmp_tdata     *table = data->table;
    netsnmp_tdata_row *row;

    while ((row = netsnmp_tdata_row_first(table))) {
        ipfixTemplateStatsTable_removeEntry(table, row);
    }
}

/** handles requests for the ipfixTemplateStatsTable table */
int
ipfixTemplateStatsTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    (void) handler;
    (void) reginfo;

    netsnmp_request_info       *request;
    netsnmp_table_request_info *table_info;
    TemplateStatsEntry_t       *table_entry;

    struct counter64            c64;
    uint32_t                    timeticks = 0;

    DEBUGMSGTL(("ipfixTemplateStatsTable:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {
            if (request->processed)
                continue;

            table_entry = (TemplateStatsEntry_t *)
                              netsnmp_tdata_extract_entry(request);
            table_info  =     netsnmp_extract_table_info( request);
    
            switch (table_info->colnum) {
            case COLUMN_IPFIXTEMPLATE_DATARECORDS:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                c64.low = table_entry->DataRecords & UINT32_MAX;
                c64.high = (table_entry->DataRecords >> 32) & UINT32_MAX;
                snmp_set_var_typed_value( request->requestvb, ASN_COUNTER64,
                                          &c64, sizeof(c64));
                break;
            case COLUMN_IPFIXTEMPLATE_DISCONTINUITYTIME:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                if(table_entry->DiscontinuityTime != 0){
                    timeticks = (uint32_t) (difftime(time(nullptr),table_entry->DiscontinuityTime) *100);
                }
                snmp_set_var_typed_value( request->requestvb, ASN_TIMETICKS,
                                          &timeticks, sizeof(timeticks));
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }
    return SNMP_ERR_NOERROR;
}
