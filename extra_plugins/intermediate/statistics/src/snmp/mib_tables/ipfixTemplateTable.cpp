/**
 * \file ipfixTemplateTable.cpp
 * \author Jan Kala <xkalaj01@stud.fit.vutbr.cz>
 * \brief MIB table functions needed by Net-SNMP library
 * \date 2019
 */

/* Copyright (C) 2019 CESNET, z.s.p.o.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * ALTERNATIVELY, provided that this notice is retained in full, this
 * product may be distributed under the terms of the GNU General Public
 * License (GPL) version 2 or later, in which case the provisions
 * of the GPL apply INSTEAD OF those given above.
 *
 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 *
 */
/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.table_data.conf
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include <iostream>
#include "ipfixTemplateTable.h"

/** Initialize the ipfixTemplateTable table by defining its contents and how it's structured */
struct ipfixTemplate_cache_data *
initialize_table_ipfixTemplateTable(TemplateTable_t *storage, uint data_timeout)
{
    const oid ipfixTemplateTable_oid[] = {1,3,6,1,2,1,193,1,1,2};
    const size_t ipfixTemplateTable_oid_len   = OID_LENGTH(ipfixTemplateTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_tdata                   *table_data;
    netsnmp_cache                   *cache;
    ipfixTemplate_cache_data   *cache_data;

    DEBUGMSGTL(("ipfixTemplateTable:init", "initializing table ipfixTemplateTable\n"));

    reg = netsnmp_create_handler_registration(
              "ipfixTemplateTable",     ipfixTemplateTable_handler,
              ipfixTemplateTable_oid, ipfixTemplateTable_oid_len,
              HANDLER_CAN_RONLY
              );

    table_data = netsnmp_tdata_create_table( "ipfixTemplateTable", 0 );
    if (NULL == table_data) {
        snmp_log(LOG_ERR,"error creating tdata table for ipfixTemplateTable\n");
        return NULL;
    }
    cache = netsnmp_cache_create(data_timeout,
                                  ipfixTemplateTable_load, ipfixTemplateTable_free,
                                  ipfixTemplateTable_oid, ipfixTemplateTable_oid_len);

    // Creating data for cache to read while reloading MIB
    cache_data = static_cast<ipfixTemplate_cache_data *>(malloc(sizeof(ipfixTemplate_cache_data)));
    cache_data->table = table_data;
    cache_data->storage = storage;

    if (NULL == cache) {
        snmp_log(LOG_ERR,"error creating cache for ipfixTemplateTable\n");
    }
    else{
        cache->flags = NETSNMP_CACHE_DONT_FREE_EXPIRED | NETSNMP_CACHE_AUTO_RELOAD;
        cache->magic = (void *)cache_data;
    }
    cache_data->table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    if (NULL == cache_data->table_info) {
        snmp_log(LOG_ERR,"error creating table info for ipfixTemplateTable\n");
        return NULL;
    }
    netsnmp_table_helper_add_indexes(cache_data->table_info,
                           ASN_UNSIGNED,  /* index: ipfixTransportSessionIndex */
                           ASN_UNSIGNED,  /* index: ipfixTemplateObservationDomainId */
                           ASN_UNSIGNED,  /* index: ipfixTemplateId */
                           0);

    cache_data->table_info->min_column = COLUMN_IPFIXTEMPLATE_SETID;
    cache_data->table_info->max_column = COLUMN_IPFIXTEMPLATE_ACCESSTIME;
    
    netsnmp_tdata_register( reg, table_data, cache_data->table_info );
    if (cache) 
        netsnmp_inject_handler_before( reg, netsnmp_cache_handler_get(cache),
                                       TABLE_TDATA_NAME);

    cache_data->cache = cache;
    return cache_data;
}

/* create a new row in the table */
netsnmp_tdata_row *
ipfixTemplateTable_createEntry(netsnmp_tdata *table_data
                 , uint32_t  ipfixTransportSessionIndex
                 , uint32_t  ipfixTemplateObservationDomainId
                 , uint32_t  ipfixTemplateId
                ) {
    TemplateEntry_t *entry;
    netsnmp_tdata_row *row;

    entry = SNMP_MALLOC_TYPEDEF(TemplateEntry_t);
    if (!entry)
        return NULL;

    row = netsnmp_tdata_create_row();
    if (!row) {
        SNMP_FREE(entry);
        return NULL;
    }
    row->data = entry;

    DEBUGMSGT(("ipfixTemplateTable:entry:create", "row 0x%lu\n", (uintptr_t)row));
    entry->TransportSessionIndex = ipfixTransportSessionIndex;
    netsnmp_tdata_row_add_index( row, ASN_UNSIGNED,
                                 &(entry->TransportSessionIndex),
                                 sizeof(entry->TransportSessionIndex));
    entry->ObservationDomainId = ipfixTemplateObservationDomainId;
    netsnmp_tdata_row_add_index( row, ASN_UNSIGNED,
                                 &(entry->ObservationDomainId),
                                 sizeof(entry->ObservationDomainId));
    entry->Id = ipfixTemplateId;
    netsnmp_tdata_row_add_index( row, ASN_UNSIGNED,
                                 &(entry->Id),
                                 sizeof(entry->Id));
    if (table_data)
        netsnmp_tdata_add_row( table_data, row );
    return row;
}

/* remove a row from the table */
void
ipfixTemplateTable_removeEntry(netsnmp_tdata     *table_data, 
                 netsnmp_tdata_row *row) {
    TemplateEntry_t *entry;

    if (!row)
        return;    /* Nothing to remove */

    DEBUGMSGT(("ipfixTemplateTable:entry:remove", "row 0x%lu\n", (uintptr_t)row));

    entry = (TemplateEntry_t *)row->data;
    SNMP_FREE( entry );

    if (table_data)
        netsnmp_tdata_remove_and_delete_row( table_data, row );
    else
        netsnmp_tdata_delete_row( row );    
}

/* Example cache handling - set up table_data list from a suitable file */
int
ipfixTemplateTable_load( netsnmp_cache *cache, void *vmagic ) {
    (void) cache;
    netsnmp_tdata                   *table;
    netsnmp_tdata_row               *row;
    TemplateEntry_t                 *mib_row;
    ipfixTemplate_cache_data   *data;

    data = static_cast<ipfixTemplate_cache_data   *>(vmagic);
    table = data->table;

    while(storage_lock.test_and_set(std::memory_order_acquire));
    for ( auto it : *data->storage) {

        row = ipfixTemplateTable_createEntry(table
                 , std::get<0>(it.first)
                 , std::get<1>(it.first)
                 , std::get<2>(it.first)
                        );
        if (row == NULL)
            continue;
        mib_row = (TemplateEntry_t *)row->data;
        memcpy(mib_row, &it.second, sizeof(TemplateEntry_t));
        mib_row->valid = 1;
    }
    storage_lock.clear(std::memory_order_release);
    return 0;  /* OK */
}

void
ipfixTemplateTable_free( netsnmp_cache *cache, void *vmagic ) {
    (void)cache;
    ipfixTemplate_cache_data   *data = (ipfixTemplate_cache_data   *) vmagic;
    netsnmp_tdata     *table = data->table;
    netsnmp_tdata_row *row;

    while ((row = netsnmp_tdata_row_first(table))) {
        ipfixTemplateTable_removeEntry(table, row);
    }
}

/** handles requests for the ipfixTemplateTable table */
int
ipfixTemplateTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    (void) handler;
    (void) reginfo;

    netsnmp_request_info       *request;
    netsnmp_table_request_info *table_info;
    TemplateEntry_t            *table_entry;
    unsigned char               time_out[11];
    struct tm                  time_info;
    time_t time_helper;

    DEBUGMSGTL(("ipfixTemplateTable:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {
            if (request->processed)
                continue;

            table_entry = (TemplateEntry_t *)
                              netsnmp_tdata_extract_entry(request);
            table_info  =     netsnmp_extract_table_info( request);
    
            switch (table_info->colnum) {
            case COLUMN_IPFIXTEMPLATE_ID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->Id);
                break;
            case COLUMN_IPFIXTEMPLATE_SETID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->SetId);
                break;
            case COLUMN_IPFIXTEMPLATE_ACCESSTIME:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }

                // converting time into structure with date and time fields
                time_helper = table_entry->AccessTime;
                time_info = *localtime(&time_helper);

                time_info.tm_year += 1900; // tm_year is number of years after year 1900
                time_info.tm_mon += 1; // tm_mon is number of years since January

                time_out[0] = static_cast<unsigned char>((time_info.tm_year & 0xFF00)>>8);  // First half of the year
                time_out[1] = static_cast<unsigned char>(time_info.tm_year & 0x00FF);       // Second half of the year
                time_out[2] = static_cast<unsigned char>(time_info.tm_mon);            // Month
                time_out[3] = static_cast<unsigned char>(time_info.tm_mday);           // Day
                time_out[4] = static_cast<unsigned char>(time_info.tm_hour);           // Hours
                time_out[5] = static_cast<unsigned char>(time_info.tm_min);            // Minutes
                time_out[6] = static_cast<unsigned char>(time_info.tm_sec);            // Seconds
                time_out[7] = 0;         // Milliseconds -> We cannot determine that from this epoch time
                time_out[8] = '+';       // Direction from UTC
                time_out[9] = 0;         // Hours from UTC
                time_out[10]= 0;         // Minutes from UTC

                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR, time_out, sizeof(time_out));
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }
    return SNMP_ERR_NOERROR;
}
